/ *
 * jQuery JSONP Core Plugin 2.4.0（2012-08-21）
 *
 * https://github.com/jaubourg/jquery-jsonp
 *
 *版权所有（c）2012 Julian Aubourg
 *
 *本文件根据条款被授权为免费软件
 *麻省理工学院许可证：http://www.opensource.org/licenses/mit-license.php
 * /
（function（$）{

	// ##################### UTILITIES ##

	//诺普
	function noop（）{
	}

	//泛型回调
	function genericCallback（data）{
		lastValue = [data];
	}

	//如果定义了调用
	函数callIfDefined（method，object，parameters）{
		返回方法&& method.apply && method.apply（object.context || object，parameters）;
	}

	//给予加入字符给定url
	函数qMarkOrAmp（url）{
		return / \？/ .test（url）？“＆”：“？”
	}

	var // String constants（为了更好的缩小）
		STR_ASYNC =“异步”，
		STR_CHARSET =“charset”，
		STR_EMPTY =“”，
		STR_ERROR =“error”，
		STR_INSERT_BEFORE =“insertBefore”，
		STR_JQUERY_JSONP =“_jqjsp”，
		STR_ON =“on”，
		STR_ON_CLICK = STR_ON +“点击”，
		STR_ON_ERROR = STR_ON + STR_ERROR，
		STR_ON_LOAD = STR_ON +“加载”，
		STR_ON_READY_STATE_CHANGE = STR_ON +“readystatechange”，
		STR_READY_STATE =“readyState”，
		STR_REMOVE_CHILD =“removeChild”，
		STR_SCRIPT_TAG =“<script>”，
		STR_SUCCESS =“成功”，
		STR_TIMEOUT =“timeout”，

		//窗口
		win = window，
		//延期
		Deferred = $ .Deferred，
		//头元素
		head = $（“head”）[0] || document.documentElement中，
		//页缓存
		pageCache = {}，
		//计数器
		count = 0，
		//最后返回的值
		lastValue，

		// ##################### DEFAULT OPTIONS ##
		xOptionsDefaults = {
			// beforeSend：undefined，
			// cache：false，
			回调：STR_JQUERY_JSONP，
			// callbackParameter：undefined，
			// charset：undefined，
			// complete：undefined，
			// context：undefined，
			// data：“”，
			// dataFilter：undefined，
			// error：undefined，
			// pageCache：false，
			// success：undefined，
			// timeout：0，
			//传统：假，
			url：location.href
		}，

		//歌剧要求嗅探：/
		歌剧= win.opera，

		// IE <10
		oldIE = !! $（“<div>”）.html（“<！ -  [if IE]> <i> <！[endif]  - >”）.find（“i”）。

	// ＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃＃ 主功能 ＃＃
	函数jsonp（xOptions）{

		//默认构建数据
		xOptions = $ .extend（{}，xOptionsDefaults，xOptions）;

		//引用xOptions成员（为了更好的分解）
		var successCallback = xOptions.success，
			errorCallback = xOptions.error，
			completeCallback = xOptions.complete，
			dataFilter = xOptions.dataFilter，
			callbackParameter = xOptions.callbackParameter，
			successCallbackName = xOptions.callback，
			cacheFlag = xOptions.cache，
			pageCacheFlag = xOptions.pageCache，
			charset = xOptions.charset，
			url = xOptions.url，
			data = xOptions.data，
			timeout = xOptions.timeout，
			pageCached，

			//中止/完成标志
			done = 0，

			//生命周期功能
			cleanUp = noop，

			//支持vars
			supportOnload，
			supportOnreadystatechange，

			//请求执行vars
			则firstChild，
			脚本，
			scriptAfter，
			timeoutTimer;

		//如果我们有Deferreds：
		//  - 替换回调
		//  - 将xOptions推广到承诺
		Deferred && Deferred（function（defer）{
			defer.done（successCallback）.fail（errorCallback）;
			successCallback = defer.resolve;
			errorCallback = defer.reject;
		}）。promise（xOptions）;

		//创建中止方法
		xOptions.abort = function（）{
			！（done ++）&& cleanUp（）;
		};

		//如果提供，请调用beforeSend（如果返回false则提早中止）
		if（callIfDefined（xOptions.beforeSend，xOptions，[xOptions]）===！1 || done）{
			返回xOptions;
		}

		//控制条目
		url = url || STR_EMPTY;
		data = data？（（typeof data）==“string”？data：$ .param（data，xOptions.traditional））：STR_EMPTY;

		//构建最终的URL
		url + =数据？（qMarkOrAmp（url）+ data）：STR_EMPTY;

		//如果提供了选项，则添加回调参数
		callbackParameter &&（url + = qMarkOrAmp（url）+ encodeURIComponent（callbackParameter）+“=？”）;

		//如果需要，添加anticache参数
		！cacheFlag &&！pageCacheFlag &&（url + = qMarkOrAmp（url）+“_”+（new Date（））.getTime（）+“=”）;

		//替换最后？通过回调参数
		url = url.replace（/ = \？（＆| $）/，“=”+ successCallbackName +“$ 1”）;

		//成功通知
		函数notifySuccess（json）{

			if（！（done ++））{

				清理（​​）;
				//如果需要，则为Pagecache
				pageCacheFlag &&（pageCache [url] = {s：[json]}）;
				//应用数据过滤器（如果提供）
				dataFilter &&（json = dataFilter.apply（xOptions，[json]））;
				//调用成功然后完成
				callIfDefined（successCallback，xOptions，[json，STR_SUCCESS，xOptions]）;
				callIfDefined（completeCallback，xOptions，[xOptions，STR_SUCCESS]）;

			}
		}

		//错误通知器
		function notifyError（type）{

			if（！（done ++））{

				// 清理
				清理（​​）;
				//如果纯错误（不是超时），如果需要缓存
				pageCacheFlag && type！= STR_TIMEOUT &&（pageCache [url] = type）;
				//调用错误然后完成
				callIfDefined（errorCallback，xOptions，[xOptions，type]）;
				callIfDefined（completeCallback，xOptions，[xOptions，type]）;

			}
		}

		//检查页面缓存
		if（pageCacheFlag &&（pageCached = pageCache [url]））{

			pageCached.s？notifySuccess（pageCached.s [0]）：notifyError（pageCached）;

		} else {

			//安装通用回调
			//（BEWARE：global namespace pollution ahoy）
			win [successCallbackName] = genericCallback;

			//创建脚本标签
			script = $（STR_SCRIPT_TAG）[0];
			script.id = STR_JQUERY_JSONP + count ++;

			//设置字符集（如果提供）
			if（charset）{
				脚本[STR_CHARSET] =字符集;
			}

			opera && opera.version（）<11.60？
				// onerror不受支持：不要设置为异步并假定按顺序执行。
				//添加尾随脚本来模拟事件
				（（scriptAfter = $（STR_SCRIPT_TAG）[0]）.text =“document.getElementById（'”+ script.id +“'）。”+ STR_ON_ERROR +“（）”）
			：
				// onerror被支持：将脚本设置为异步以避免请求阻止彼此
				（脚本[STR_ASYNC] = STR_ASYNC）

			;

			// Internet Explorer：event / htmlFor技巧
			if（oldIE）{
				script.htmlFor = script.id;
				script.event = STR_ON_CLICK;
			}

			//附加事件处理程序
			脚本[STR_ON_LOAD] =脚本[STR_ON_ERROR] =脚本[STR_ON_READY_STATE_CHANGE] = function（result）{

				//测试readyState是否存在
				if（！script [STR_READY_STATE] ||！/i/.test（script [STR_READY_STATE]））{

					尝试{

						脚本[STR_ON_CLICK] &&脚本[STR_ON_CLICK]（）;

					catch（_）{}

					result = lastValue;
					lastValue = 0;
					结果？notifySuccess（result [0]）：notifyError（STR_ERROR）;

				}
			};

			//设置源码
			script.src = url;

			//重新声明cleanUp函数
			cleanUp = function（i）{
				timeoutTimer && clearTimeout（timeoutTimer）;
				脚本[STR_ON_READY_STATE_CHANGE] =脚本[STR_ON_LOAD] =脚本[STR_ON_ERROR] = null;
				头[STR_REMOVE_CHILD]（脚本）;
				scriptAfter && head [STR_REMOVE_CHILD]（scriptAfter）;
			};

			//附加主脚本
			头[STR_INSERT_BEFORE]（脚本，（firstChild = head.firstChild））;

			//如果需要，附加尾随脚本
			scriptAfter && head [STR_INSERT_BEFORE]（scriptAfter，firstChild）;

			//如果需要超时，请安装它
			timeoutTimer = timeout> 0 && setTimeout（function（）{
				notifyError（STR_TIMEOUT）;
			} ， 时间到 ）;

		}

		返回xOptions;
	}

	// ###################### SETUP FUNCTION ##
	jsonp.setup = function（xOptions）{
		$ .extend（xOptionsDefaults，xOptions）;
	};

	// ###################### INSTALL in jQuery ##
	$ .jsonp = jsonp;

}）（jQuery）;
